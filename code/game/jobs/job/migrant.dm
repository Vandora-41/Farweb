var/pcteam = 0
var/thteam = 0
var/list/thanatiteams = list()
var/list/pcteams = list()
var/expedition_leader_pc
var/expedition_leader_th
var/set_mig_spawn_th
var/set_mig_spawn_pc

/datum/job/migrant
	title = "Migrant"
	titlebr = "Migrante"
	flag = MIGRANT
	department_flag = CIVILIAN
	faction = "Station"
	total_positions = -1
	spawn_positions = -1
	supervisors = "No one, yet"
	selection_color = "#dddddd"
	idtype = null
	thanati_chance = 100
	access = list()
	minimal_access = list()

	equip(var/mob/living/carbon/human/H)
		if(!H)
			return 0
		..()
		H.voicetype = pick("noble","strong","sketchy")
		H.outsider = 1
		//H.migclass = pick("Mushroomcutter", "Cook", "Mercenary","Miner","Thief","Acrobat","Healer","Reporter","Pathfinder","Blacksmith","Fisher","Crusader","Monk")
		//if(master_mode != "holywar" && master_mode != "minimig")
		H.stat = UNCONSCIOUS
		H.can_stand = 0
		H.sleeping = 500
		if(ticker.eof.id == "intouch")
			H.equip_to_slot_or_del(new /obj/item/device/radio/headset/bracelet/cheap(H), slot_wrist_r)
		if(ticker.eof.id == "migrantess")
			H.gender = FEMALE
		if(H.ckey in outlaw)
			H.add_verb(/mob/living/carbon/human/proc/toggle_outlaw)
		H.lying = 1
		if(master_mode == "holywar")
			H.add_verb(/mob/living/carbon/human/proc/migequipwar)
			if(pcteam > thteam)
				H.religion = "Thanati"
				to_chat(H, "You got rebalanced to the Thanati team.")
			else if(thteam > pcteam)
				H.religion = "Gray Church"
				to_chat(H, "You got rebalanced to the P.C team.")
			if(H.religion == "Thanati")
				thteam++
				thteam += H
				//H.update_all_team_icons()
				/*for(var/mob/living/carbon/human/HH in mob_list)
					if(HH.client)
						HH.update_all_team_icons()*/
			if(H.religion == "Gray Church")
				pcteam++
				pcteam += H
				/*H.update_all_team_icons()
				for(var/mob/living/carbon/human/HH in mob_list)
					if(HH.client)
						HH.update_all_team_icons()*/
		else if(master_mode == "minimig")
			H.add_verb(/mob/living/carbon/human/proc/migequip)
			if(pcteam > thteam)
				H.religion = "Thanati"
				to_chat(H, "You got rebalanced to the Thanati team.")
			else if(thteam > pcteam)
				H.religion = "Gray Church"
				to_chat(H, "You got rebalanced to the P.C team.")
			if(H.religion == "Thanati")
				thteam++
				thanatiteams += H
			if(H.religion == "Gray Church")
				pcteam++
				pcteams += H
		else
			H.add_verb(/mob/living/carbon/human/proc/migequip)
		//return 1

/mob/living/carbon/human/var/toggle_outlaw

/mob/living/carbon/human/proc/toggle_outlaw()
	set hidden = 0
	set category = "gpc"
	set name = "ToggleOutlaw"
	set desc="Choose your outlaw class!"
	if(master_mode != "minimig")
		if(src.ckey in outlaw)
			if(src.toggle_outlaw)
				src.toggle_outlaw = FALSE
				to_chat(src, "OUTLAW : Disabled")
			else
				src.toggle_outlaw = TRUE
				to_chat(src, "OUTLAW : Enabled")
		else
			to_chat(src, "You need to pay for Outlaw.")
	else
		if(minimig_bandit)
			if(src.ckey in outlaw)
				if(src.toggle_outlaw)
					src.toggle_outlaw = FALSE
					to_chat(src, "OUTLAW : Disabled")
				else
					src.toggle_outlaw = TRUE
					to_chat(src, "OUTLAW : Enabled")
			else
				to_chat(src, "You need to pay for Outlaw.")
		else
			to_chat(src, "Mini-Migration hasn't allowed bandits yet!")

var/bftherlord

var/mob/FortLords
var/mob/FortLordHand

/mob/living/carbon/human/proc/migequip()
	set hidden = 0
	set category = "gpc"
	set name = "ChoosemigrantClass"
	set desc="Choose your migrant class!"
	var/list/migclasses = list("Adventurer", "Bard","Courier","Mushroomcutter", "Cook", "Peasant","Miner","Thief","Acrobat","Healer", "Alchemist","Reporter","Pathfinder","Blacksmith","Hunter","Swineherd","Fisher","Prostitute","Pcheloved")
	//var/list/outlawclasses = list("Robber","Bandit","Grave Robber", "Smuggler", "Swashbuckler","Swindler","Rogue","Raider","Burglar")
	var/list/outlawclasses = list("Robber","Bandit","Grave Robber", "Rogue")
	var/mob/living/carbon/human/H = src
	if(!src.saved_migclasses)
		src.saved_migclasses = list()
		if(H.religion == "Gray Church" && (H.gender == MALE || trapapoc.Find(H.ckey)))
			migclasses.Add("Priest")
		if(H.toggle_outlaw)
			while(saved_migclasses.len < 7)
				saved_migclasses.Add(pick(outlawclasses))
		else
			while(saved_migclasses.len < 7)
				saved_migclasses.Add(pick(migclasses))

	if(crusader.Find(H.ckey) && H.religion == "Gray Church")
		saved_migclasses.Add("Crusader")
	if(monk.Find(H.ckey) && H.religion == "Gray Church")
		saved_migclasses.Add("Monk")
	if(lord.Find(H.ckey))
		saved_migclasses.Add("Lord")
	if(prob(2))
		if(!FortLords)
			saved_migclasses.Add("Lord")
	if(FortLords)
		if(!FortLordHand)
			saved_migclasses.Add("Lord Hand")
	if(prob(4))
		var/rareClass = pick("Town Guard","Martial Artist","Vampire Hunter")
		saved_migclasses.Add(rareClass)
	H.remove_verb(/mob/living/carbon/human/proc/migequip)
	var/list/classtotals = list("(Random)")
	classtotals += saved_migclasses
	if(!expedition_leader_pc && src.religion == "Gray Church" || !expedition_leader_th && src.religion == "Thanati")
		classtotals.Add("Expedition Leader")
	if(ticker.eof.id == "crusade" && H.religion == "Gray Church" && H.gender == MALE)
		classtotals = list("Crusader")
	sleep(10)
	//H.migclass = input(H,"Select a migrant class..","MIGRANTS",H.migclass) in list(firstmig,secondmig,thirdmig,fourthmig, fifthmig, sixthmig)
	H.migclass = input(H,"Select a migrant class..","MIGRANTS",H.migclass) in classtotals
	sleep(1)
	if(H.migclass == "(Random)")
		H.migclass = pick(migclasses)
	if(H.migclass == "Expedition Leader" && expedition_leader_th || H.migclass == "Expedition Leader" && expedition_leader_pc)
		H.migclass = pick(migclasses)
	sleep(10)
	H.job = H.migclass
	H.old_job = H.migclass
	if(H.migclass == "Priest")
		H.mind.assigned_role = H.migclass
		H.mind.assigned_job = H.migclass
	H.stat = CONSCIOUS
	H.nutrition = rand(300,500)
	H.can_stand = 1
	H.sleeping = 0
	if(master_mode == "holywar" || "minimig")
		if(H.religion == "Gray Church")
			if(set_mig_spawn_th && !(master_mode == "holywar"))
				H.forceMove(set_mig_spawn_th)
			else
				for(var/obj/effect/landmark/L in landmarks_list)
					if (L.name == "GrayChurchWar")
						H.forceMove(L.loc)
		else
			if(set_mig_spawn_pc && !(master_mode == "holywar"))
				H.forceMove(set_mig_spawn_pc)
			else
				for(var/obj/effect/landmark/L in landmarks_list)
					if (L.name == "ThanatiWar")
						H.forceMove(L.loc)
	switch(H.migclass)
		if("Adventurer")
			H.equip_to_slot_or_del(new /obj/item/weapon/claymore/rusty(H), slot_l_hand)
			H.equip_to_slot_or_del(new /obj/item/clothing/head/armingcap(H), slot_head)
			H.equip_to_slot_or_del(new /obj/item/clothing/under/rank/migrant(H), slot_w_uniform)
			H.equip_to_slot_or_del(new /obj/item/weapon/storage/backpack/migrant(H), slot_back)
			H.equip_to_slot_or_del(new /obj/item/clothing/suit/armor/vest/iron_cuirass(H), slot_wear_suit)
			H.my_skills.CHANGE_SKILL(SKILL_MELEE, rand(11,11))
			H.my_skills.CHANGE_SKILL(SKILL_RANGE, rand(6,9))
			H.my_skills.CHANGE_SKILL(SKILL_UNARM, rand(0,1))
			H.my_skills.CHANGE_SKILL(SKILL_SWORD, rand(0,1))
			H.my_skills.CHANGE_SKILL(SKILL_MASON, 8)
			H.my_skills.CHANGE_SKILL(SKILL_CRAFT, 8)
			H.my_skills.CHANGE_SKILL(SKILL_FISH, rand(0,0))
			H.my_skills.CHANGE_SKILL(SKILL_CLIMB, rand(10,11))
			H.my_skills.CHANGE_SKILL(SKILL_COOK, rand(4,7))
			H.my_stats.change_stat(STAT_ST, 1)
			H.my_stats.change_stat(STAT_HT, 1)
			H.my_stats.change_stat(STAT_DX, 0)
			H.my_stats.change_stat(STAT_IN, 0)
			H.add_perk(/datum/perk/ref/strongback)
			H.add_perk(/datum/perk/illiterate)
			H.terriblethings = TRUE
		if("Bard")
			if(prob(20))
				H.equip_to_slot_or_del(new /obj/item/weapon/musical_instrument/baliset/guitar(H), slot_l_hand)
			else
				H.equip_to_slot_or_del(new /obj/item/weapon/musical_instrument/baliset(H), slot_l_hand)
			H.equip_to_slot_or_del(new /obj/item/clothing/head/bard(H), slot_head)
			H.equip_to_slot_or_del(new /obj/item/clothing/under/rank/migrant(H), slot_w_uniform)
			H.equip_to_slot_or_del(new /obj/item/weapon/storage/backpack/migrant(H), slot_back)
			H.equip_to_slot_or_del(new /obj/item/weapon/storage/backpack/coinbag(H), slot_amulet)
			H.my_skills.CHANGE_SKILL(SKILL_MELEE, 7)
			H.my_skills.CHANGE_SKILL(SKILL_RANGE, 7)
			H.my_skills.CHANGE_SKILL(SKILL_MASON, 8)
			H.my_skills.CHANGE_SKILL(SKILL_CRAFT, 8)
			H.my_skills.CHANGE_SKILL(SKILL_MUSIC, rand(14,15))
			H.my_skills.CHANGE_SKILL(SKILL_CLIMB, rand(10,11))
			H.my_skills.CHANGE_SKILL(SKILL_COOK, rand(4,7))
			H.my_stats.change_stat(STAT_ST, 0)
			H.my_stats.change_stat(STAT_HT, -1)
			H.my_stats.change_stat(STAT_DX, 3)
			H.my_stats.change_stat(STAT_IN, 4)
			H.add_verb(list(/mob/living/carbon/human/proc/remembersong,
			/mob/living/carbon/human/proc/sing))

			H.add_perk(/datum/perk/singer)
		if("Courier")
			H.equip_to_slot_or_del(new /obj/item/clothing/head/cargohat(H), slot_head)
			H.equip_to_slot_or_del(new /obj/item/clothing/under/rank/migrant(H), slot_w_uniform)
			H.equip_to_slot_or_del(new /obj/item/weapon/storage/backpack/satchel(H), slot_back)
			H.equip_to_slot_or_del(new /obj/item/clothing/suit/storage/vest/flakjacket(H), slot_wear_suit)
			H.equip_to_slot_or_del(new /obj/item/weapon/gun/energy/taser/leet/maulet(H), slot_belt)
			H.equip_to_slot_or_del(new /obj/item/weapon/storage/delivery_box(H.back), slot_in_backpack)
			H.equip_to_slot_or_del(new /obj/item/weapon/storage/delivery_box(H.back), slot_in_backpack)
			H.equip_to_slot_or_del(new /obj/item/weapon/cell/crap(H.back), slot_in_backpack)
			H.my_skills.CHANGE_SKILL(SKILL_MELEE, rand(8,8))
			H.my_skills.CHANGE_SKILL(SKILL_RANGE, rand(10,10))
			H.my_skills.CHANGE_SKILL(SKILL_UNARM, rand(0,1))
			H.my_skills.CHANGE_SKILL(SKILL_MASON, 8)
			H.my_skills.CHANGE_SKILL(SKILL_CRAFT, 8)
			H.my_skills.CHANGE_SKILL(SKILL_SWORD, rand(0,2))
			H.my_skills.CHANGE_SKILL(SKILL_CLIMB, rand(12,13))
			H.my_skills.CHANGE_SKILL(SKILL_COOK, rand(4,7))
			H.my_skills.CHANGE_SKILL(SKILL_SWIM, rand(11,12))
			H.my_stats.change_stat(STAT_HT, 0)
			H.my_stats.change_stat(STAT_DX, 1)
			H.my_stats.change_stat(STAT_IN, 1)
			H.add_perk(/datum/perk/ref/strongback)
			H.add_perk(/datum/perk/ref/cavetravel)
			H.terriblethings = TRUE
		if("Lord")
			if(FortLords)
				to_chat(src, "<span class='combatbold'>[pick(fnord)] There can't be two lords!</span>")
				return
			FortLords = H
			H.equip_to_slot_or_del(new /obj/item/weapon/claymore/bastard(H), slot_l_hand)
			H.equip_to_slot_or_del(new /obj/item/weapon/flame/torch/lantern/on(H), slot_r_hand)
			H.equip_to_slot_or_del(new /obj/item/clothing/under/rank/captain(H), slot_w_uniform)
			H.equip_to_slot_or_del(new /obj/item/sheath(H), slot_belt)
			H.equip_to_slot_or_del(new /obj/item/weapon/storage/backpack/bfather(H), slot_back)
			H.equip_to_slot_or_del(new /obj/item/sleepingbag(H), slot_back2)
			H.equip_to_slot_or_del(new /obj/item/clothing/suit/armor/vest/security/lord(H), slot_wear_suit)
			H.equip_to_slot_or_del(new /obj/item/weapon/card/id/lordcave(H), slot_wear_id)
			to_chat(H, "<span class='passive'>Your hand will soon be coming.</span>")
			H.my_skills.CHANGE_SKILL(SKILL_MELEE, rand(12,12))
			H.my_skills.CHANGE_SKILL(SKILL_RANGE, rand(8,9))
			H.my_skills.CHANGE_SKILL(SKILL_FISH, rand(0,0))
			H.my_skills.CHANGE_SKILL(SKILL_MASON, 8)
			H.my_skills.CHANGE_SKILL(SKILL_CRAFT, 8)
			H.my_skills.CHANGE_SKILL(SKILL_CLIMB, rand(10,11))
			H.my_skills.CHANGE_SKILL(SKILL_COOK, rand(4,7))
			H.my_skills.CHANGE_SKILL(SKILL_SWORD, rand(0,2))
			H.my_skills.CHANGE_SKILL(SKILL_UNARM, rand(0,2))
			H.my_stats.change_stat(STAT_ST, 2)
			H.my_stats.change_stat(STAT_HT, 1)
			H.my_stats.change_stat(STAT_DX, 2)
			H.my_stats.change_stat(STAT_IN, 1)
			H.add_perk(/datum/perk/morestamina)
			H.add_perk(/datum/perk/heroiceffort)
			H.add_perk(/datum/perk/ref/strongback)
			H.add_event("nobleblood", /datum/happiness_event/noble_blood)
			H.terriblethings = TRUE
			if(H.wear_id)
				var/obj/item/weapon/card/id/C = H.wear_id
				C.registered_name = H.real_name
				C.rank = migclass
				C.assignment = migclass
				C.name = "[C.registered_name]'s Ring"
				C.money_account = new /datum/ring_account
				C.money_account.set_account(H, C.registered_name, C.assignment, rand(200, 300))
				rings_account[C] = C.money_account
		if("Lord Hand")
			if(FortLordHand)
				to_chat(src, "<span class='combatbold'>[pick(fnord)] There can't be two hands!</span>")
				return
			FortLordHand = H
			H.equip_to_slot_or_del(new /obj/item/weapon/claymore/bastard(H), slot_l_hand)
			H.equip_to_slot_or_del(new /obj/item/clothing/under/rank/captain(H), slot_w_uniform)
			H.equip_to_slot_or_del(new /obj/item/sheath(H), slot_belt)
			H.equip_to_slot_or_del(new /obj/item/weapon/flame/torch/lantern/on(H), slot_r_hand)
			H.equip_to_slot_or_del(new /obj/item/weapon/storage/backpack/industrial(H), slot_back)
			H.equip_to_slot_or_del(new /obj/item/sleepingbag(H), slot_back2)
			H.equip_to_slot_or_del(new /obj/item/clothing/suit/armor/vest/security/lord_hand(H), slot_wear_suit)
			H.equip_to_slot_or_del(new /obj/item/weapon/card/id/lordcave(H), slot_wear_id)
			H.my_skills.CHANGE_SKILL(SKILL_MELEE, rand(11,11))
			H.my_skills.CHANGE_SKILL(SKILL_RANGE, rand(8,9))
			H.my_skills.CHANGE_SKILL(SKILL_FISH, rand(0,0))
			H.my_skills.CHANGE_SKILL(SKILL_MASON, 8)
			H.my_skills.CHANGE_SKILL(SKILL_CRAFT, 8)
			H.my_skills.CHANGE_SKILL(SKILL_CLIMB, rand(10,11))
			H.my_skills.CHANGE_SKILL(SKILL_COOK, rand(4,7))
			H.my_skills.CHANGE_SKILL(SKILL_UNARM, rand(0,2))
			H.my_skills.CHANGE_SKILL(SKILL_SWORD, rand(0,2))
			H.my_stats.change_stat(STAT_ST, 1)
			H.my_stats.change_stat(STAT_HT, 1)
			H.my_stats.change_stat(STAT_DX, 1)
			H.my_stats.change_stat(STAT_IN, 1)
			var/turf/T = get_turf(FortLords)
			H.forceMove(T)
			H.add_perk(/datum/perk/morestamina)
			H.add_perk(/datum/perk/ref/strongback)
			H.add_perk(/datum/perk/heroiceffort)
			H.add_event("nobleblood", /datum/happiness_event/noble_blood)
			H.terriblethings = TRUE
			if(H.wear_id)
				var/obj/item/weapon/card/id/C = H.wear_id
				C.registered_name = H.real_name
				C.rank = migclass
				C.assignment = migclass
				C.name = "[C.registered_name]'s Ring"
				C.money_account = new /datum/ring_account
				C.money_account.set_account(H, C.registered_name, C.assignment, rand(100, 150))
				rings_account[C] = C.money_account
		if("Fisher")
			H.equip_to_slot_or_del(new /obj/item/clothing/under/rank/migrant(H), slot_w_uniform)
			H.equip_to_slot_or_del(new /obj/item/weapon/fishing_rod(H), slot_l_hand)
			H.equip_to_slot_or_del(new /obj/item/clothing/head/fisherhat(H), slot_head)
			H.equip_to_slot_or_del(new /obj/item/weapon/storage/backpack/migrant(H), slot_back)
			H.equip_to_slot_or_del(new /obj/item/weapon/kitchen/utensil/knife/combat(H), slot_r_store)
			H.equip_to_slot_or_del(new /obj/item/weapon/reagent_containers/food/snacks/worms(H), slot_l_store)
			H.my_skills.CHANGE_SKILL(SKILL_MELEE, rand(7,7))
			H.my_skills.CHANGE_SKILL(SKILL_RANGE, rand(5,5))
			H.my_skills.CHANGE_SKILL(SKILL_FISH, rand(14,17))
			H.my_skills.CHANGE_SKILL(SKILL_MASON, 8)
			H.my_skills.CHANGE_SKILL(SKILL_CRAFT, 8)
			H.my_skills.CHANGE_SKILL(SKILL_SWIM, rand(14,17))
			H.my_skills.CHANGE_SKILL(SKILL_CLIMB, rand(10,11))
			H.my_skills.CHANGE_SKILL(SKILL_COOK, rand(9,9))
			H.my_skills.CHANGE_SKILL(SKILL_UNARM, rand(0,1))
			H.my_stats.change_stat(STAT_HT, 3)
			H.my_stats.change_stat(STAT_DX, 1)
			H.my_stats.change_stat(STAT_IN, 0)
			H.add_perk(/datum/perk/illiterate)
		if("Mushroomcutter")
			H.equip_to_slot_or_del(new /obj/item/weapon/hatchet(H), slot_l_hand)
			H.equip_to_slot_or_del(new /obj/item/clothing/head/plebhood(H), slot_head)
			H.equip_to_slot_or_del(new /obj/item/clothing/under/rank/migrant(H), slot_w_uniform)
			H.equip_to_slot_or_del(new /obj/item/weapon/storage/backpack/migrant(H), slot_back)
			H.my_skills.CHANGE_SKILL(SKILL_MELEE, rand(7,7))
			H.my_skills.CHANGE_SKILL(SKILL_RANGE, rand(5,5))
			H.my_skills.CHANGE_SKILL(SKILL_FARM, rand(0,0))
			H.my_skills.CHANGE_SKILL(SKILL_CLIMB, rand(10,11))
			H.my_skills.CHANGE_SKILL(SKILL_COOK, rand(4,7))
			H.my_skills.CHANGE_SKILL(SKILL_MASON, 8)
			H.my_skills.CHANGE_SKILL(SKILL_CRAFT, 8)
			H.my_skills.CHANGE_SKILL(SKILL_ENGINE, rand(0,0))
			H.my_skills.CHANGE_SKILL(SKILL_SURG, rand(0,0))
			H.my_skills.CHANGE_SKILL(SKILL_MEDIC, rand(0,0))
			H.my_skills.CHANGE_SKILL(SKILL_CLEAN, rand(0,0))
			H.my_skills.CHANGE_SKILL(SKILL_UNARM, rand(0,1))
			H.my_skills.CHANGE_SKILL(SKILL_SWING, rand(0,2))
			H.my_stats.change_stat(STAT_ST, 1)
			H.my_stats.change_stat(STAT_HT, 1)
			H.my_stats.change_stat(STAT_DX, -1)
			H.my_stats.change_stat(STAT_IN, -1)
			H.add_perk(/datum/perk/illiterate)
		if("Peasant")
			H.equip_to_slot_or_del(new /obj/item/weapon/minihoe(H), slot_l_hand)
			H.equip_to_slot_or_del(new /obj/item/clothing/head/peasant(H), slot_head)
			H.equip_to_slot_or_del(new /obj/item/clothing/under/rank/migrant(H), slot_w_uniform)
			H.equip_to_slot_or_del(new /obj/item/weapon/storage/backpack/migrant(H), slot_back)
			H.equip_to_slot_or_del(new /obj/item/seeds/plumpmycelium(H.back), slot_in_backpack)
			H.equip_to_slot_or_del(new /obj/item/seeds/potatoseed(H.back), slot_in_backpack)
			H.equip_to_slot_or_del(new /obj/item/seeds/appleseed(H.back), slot_in_backpack)
			H.equip_to_slot_or_del(new /obj/item/weapon/reagent_containers/glass/bucket(H.back), slot_in_backpack)
			H.my_skills.CHANGE_SKILL(SKILL_MELEE, rand(8,8))
			H.my_skills.CHANGE_SKILL(SKILL_RANGE, rand(5,5))
			H.my_skills.CHANGE_SKILL(SKILL_FARM, rand(12,14))
			H.my_skills.CHANGE_SKILL(SKILL_CLIMB, rand(10,11))
			H.my_skills.CHANGE_SKILL(SKILL_MASON, 8)
			H.my_skills.CHANGE_SKILL(SKILL_CRAFT, 8)
			H.my_skills.CHANGE_SKILL(SKILL_COOK, rand(5,8))
			H.my_skills.CHANGE_SKILL(SKILL_ENGINE, rand(0,0))
			H.my_skills.CHANGE_SKILL(SKILL_SURG, rand(0,0))
			H.my_skills.CHANGE_SKILL(SKILL_MEDIC, rand(0,0))
			H.my_skills.CHANGE_SKILL(SKILL_CLEAN, rand(0,0))
			H.my_skills.CHANGE_SKILL(SKILL_UNARM, rand(0,1))
			H.my_stats.change_stat(STAT_ST, 3)
			H.my_stats.change_stat(STAT_HT, 1)
			H.my_stats.change_stat(STAT_DX, -2)
			H.my_stats.change_stat(STAT_IN, -2)
			H.add_perk(/datum/perk/illiterate)
		if("Priest")
			H.equip_to_slot_or_del(new /obj/item/clothing/suit/bishop/advisor(H), slot_wear_suit)
			H.equip_to_slot_or_del(new /obj/item/weapon/storage/backpack/migrant(H), slot_back)
			H.equip_to_slot_or_del(new /obj/item/weapon/storage/bible(H), slot_l_hand)
			H.equip_to_slot_or_del(new /obj/item/clothing/under/rank/chaplain(H), slot_w_uniform)
			H.equip_to_slot_or_del(new /obj/item/weapon/censer(H), slot_belt)
			H.equip_to_slot_or_del(new /obj/item/clothing/head/amulet/holy/cross/copper(H), slot_amulet)
			H.voicetype = "noble"
			H.my_skills.job_stats("Bishop")
			var/datum/job/chaplain/B = new /datum/job/chaplain
			H.my_stats.job_stats(B)
			qdel(B)
			H.my_skills.CHANGE_SKILL(SKILL_MELEE, 5)
			H.my_skills.CHANGE_SKILL(SKILL_RANGE, 5)
			H.my_skills.CHANGE_SKILL(SKILL_FARM,  0)
			H.my_skills.CHANGE_SKILL(SKILL_CLIMB, rand(10,11))
			H.my_skills.CHANGE_SKILL(SKILL_MASON, 8)
			H.my_skills.CHANGE_SKILL(SKILL_CRAFT, 8)
			H.my_skills.CHANGE_SKILL(SKILL_COOK, rand(4,7))
			H.my_skills.CHANGE_SKILL(SKILL_ENGINE, rand(0,0))
			H.my_skills.CHANGE_SKILL(SKILL_SURG, rand(0,0))
			H.my_stats.change_stat(STAT_ST, 0)
			H.my_stats.change_stat(STAT_HT, 0)
			H.my_stats.change_stat(STAT_DX, 0)
			H.my_stats.change_stat(STAT_IN, 1)
			H.add_verb(list(/mob/living/carbon/human/proc/excommunicate,
			/mob/living/carbon/human/proc/callmeeting,
			/mob/living/carbon/human/proc/marriage,
			/mob/living/carbon/human/proc/banish,
			/mob/living/carbon/human/proc/undeadead,
			/mob/living/carbon/human/proc/sins,
			/mob/living/carbon/human/proc/coronation,
			/mob/living/carbon/human/proc/reward,
			/mob/living/carbon/human/proc/eucharisty,
			/mob/living/carbon/human/proc/ClearName))

			H.add_event("nobleblood", /datum/happiness_event/noble_blood)
			H.updateStatPanel()
		if("Hunter")
			H.equip_to_slot_or_del(new /obj/item/weapon/crossbow(H), slot_back2)
			H.equip_to_slot_or_del(new /obj/item/weapon/storage/backpack/migrant(H), slot_back)
			H.equip_to_slot_or_del(new /obj/item/weapon/kitchen/utensil/knife/combat(H), slot_l_hand)
			H.equip_to_slot_or_del(new /obj/item/clothing/under/rank/migrant(H), slot_w_uniform)
			H.equip_to_slot_or_del(new /obj/item/weapon/arrow(H), slot_r_store)
			H.equip_to_slot_or_del(new /obj/item/weapon/arrow(H), slot_l_store)
			H.equip_to_slot_or_del(new /obj/item/weapon/legcuffs/bola(H), slot_belt)
			H.equip_to_slot_or_del(new /obj/item/clothing/mask/pig(H), slot_wear_mask)
			H.my_skills.CHANGE_SKILL(SKILL_MELEE, rand(10,10))
			H.my_skills.CHANGE_SKILL(SKILL_RANGE, rand(11,11))
			H.my_skills.CHANGE_SKILL(SKILL_FARM, rand(0,0))
			H.my_skills.CHANGE_SKILL(SKILL_COOK, rand(10,11))
			H.my_skills.CHANGE_SKILL(SKILL_MASON, 8)
			H.my_skills.CHANGE_SKILL(SKILL_CRAFT, 8)
			H.my_skills.CHANGE_SKILL(SKILL_ENGINE, rand(0,0))
			H.my_skills.CHANGE_SKILL(SKILL_SURG, rand(7,7))
			H.my_skills.CHANGE_SKILL(SKILL_MEDIC, rand(6,6))
			H.my_skills.CHANGE_SKILL(SKILL_CLEAN, rand(7,8))
			H.my_skills.CHANGE_SKILL(SKILL_CLIMB, rand(11,12))
			H.my_stats.change_stat(STAT_ST, 1)
			H.my_stats.change_stat(STAT_HT, 1)
			H.my_stats.change_stat(STAT_DX, 0)
			H.my_stats.change_stat(STAT_IN, 0)
			H.add_perk(/datum/perk/illiterate)
			H.terriblethings = TRUE
		if("Prostitute")
			var/pickamusersuit = pick("black","red")
			switch(pickamusersuit)
				if("red")
					H.equip_to_slot_or_del(new /obj/item/clothing/suit/hooker(H), slot_wear_suit)
					H.equip_to_slot_or_del(new /obj/item/clothing/shoes/lw/fetish(H), slot_shoes)
				if("black")
					H.equip_to_slot_or_del(new /obj/item/clothing/shoes/lw/fetish/black(H), slot_shoes)
					H.equip_to_slot_or_del(new /obj/item/clothing/suit/hooker/domina(H), slot_wear_suit)
					H.equip_to_slot_or_del(new /obj/item/clothing/gloves/fingerless(H), slot_gloves)
			H.equip_to_slot_or_del(new /obj/item/weapon/storage/backpack/migrant(H), slot_back)
			H.my_skills.CHANGE_SKILL(SKILL_MELEE, rand(6,6))
			H.my_skills.CHANGE_SKILL(SKILL_RANGE, rand(5,5))
			H.my_skills.CHANGE_SKILL(SKILL_FARM, rand(0,0))
			H.my_skills.CHANGE_SKILL(SKILL_CLIMB, rand(10,11))
			H.my_skills.CHANGE_SKILL(SKILL_MASON, 8)
			H.my_skills.CHANGE_SKILL(SKILL_CRAFT, 8)
			H.my_skills.CHANGE_SKILL(SKILL_PARTY, rand(11,15))
			H.my_skills.CHANGE_SKILL(SKILL_RIDE, rand(13,17))
			H.my_skills.CHANGE_SKILL(SKILL_COOK, rand(4,7))
			H.my_skills.CHANGE_SKILL(SKILL_ENGINE, rand(0,0))
			H.my_skills.CHANGE_SKILL(SKILL_SURG, rand(0,0))
			H.my_skills.CHANGE_SKILL(SKILL_MEDIC, rand(0,0))
			H.my_skills.CHANGE_SKILL(SKILL_CLEAN, rand(7,9))
			H.my_stats.change_stat(STAT_ST, -1)
			H.my_stats.change_stat(STAT_HT, -1)
			H.my_stats.change_stat(STAT_DX, 1)
			H.my_stats.change_stat(STAT_IN, -1)
			H.virgin = FALSE
			H.add_perk(/datum/perk/illiterate)
		if("Swineherd")
			H.equip_to_slot_or_del(new /obj/item/clothing/under/rank/migrant(H), slot_w_uniform)
			H.equip_to_slot_or_del(new /obj/item/weapon/storage/backpack/migrant(H), slot_back)
			var/friend = /mob/living/simple_animal/pig
			new friend(H.loc)
			H.my_skills.CHANGE_SKILL(SKILL_MELEE, rand(6,6))
			H.my_skills.CHANGE_SKILL(SKILL_RANGE, rand(5,5))
			H.my_skills.CHANGE_SKILL(SKILL_FARM, rand(0,0))
			H.my_skills.CHANGE_SKILL(SKILL_COOK, rand(6,9))
			H.my_skills.CHANGE_SKILL(SKILL_ENGINE, rand(0,0))
			H.my_skills.CHANGE_SKILL(SKILL_MASON, 8)
			H.my_skills.CHANGE_SKILL(SKILL_CRAFT, 8)
			H.my_skills.CHANGE_SKILL(SKILL_SURG, rand(0,0))
			H.my_skills.CHANGE_SKILL(SKILL_MEDIC, rand(0,0))
			H.my_skills.CHANGE_SKILL(SKILL_CLEAN, rand(0,0))
			H.my_skills.CHANGE_SKILL(SKILL_CLIMB, rand(10,11))
			H.my_stats.change_stat(STAT_ST, 1)
			H.my_stats.change_stat(STAT_HT, 0)
			H.my_stats.change_stat(STAT_DX, 0)
			H.my_stats.change_stat(STAT_IN, -2)
			H.add_perk(/datum/perk/illiterate)
		if("Cook")
			H.equip_to_slot_or_del(new /obj/item/clothing/head/chefhat(H), slot_head)
			H.equip_to_slot_or_del(new /obj/item/clothing/suit/apron(H), slot_wear_suit)
			H.equip_to_slot_or_del(new /obj/item/clothing/under/rank/migrant(H), slot_w_uniform)
			H.equip_to_slot_or_del(new /obj/item/weapon/reagent_containers/food/snacks/grown/mushroom/plumphelmet(H), slot_r_store)
			H.equip_to_slot_or_del(new /obj/item/weapon/kitchen/utensil/knife(H), slot_l_store)
			H.equip_to_slot_or_del(new /obj/item/weapon/storage/backpack/coldpack(H), slot_back)
			H.equip_to_slot_or_del(new /obj/item/weapon/kitchen/utensil/knife(H.back), slot_in_backpack)
			H.equip_to_slot_or_del(new /obj/item/weapon/reagent_containers/food/snacks/grown/mushroom/plumphelmet(H.back), slot_in_backpack)
			H.equip_to_slot_or_del(new /obj/item/weapon/reagent_containers/food/snacks/grown/mushroom/plumphelmet(H.back), slot_in_backpack)
			H.equip_to_slot_or_del(new /obj/item/weapon/reagent_containers/food/snacks/grown/mushroom/plumphelmet(H.back), slot_in_backpack)
			H.equip_to_slot_or_del(new /obj/item/weapon/reagent_containers/glass/beaker/stewpan(H.back), slot_in_backpack)
			H.my_skills.CHANGE_SKILL(SKILL_CLIMB, rand(10,11))
			H.my_skills.CHANGE_SKILL(SKILL_MELEE, rand(5,5))
			H.my_skills.CHANGE_SKILL(SKILL_RANGE, rand(7,7))
			H.my_skills.CHANGE_SKILL(SKILL_FARM, rand(9,9))
			H.my_skills.CHANGE_SKILL(SKILL_COOK, rand(12,14))
			H.my_skills.CHANGE_SKILL(SKILL_MASON, 8)
			H.my_skills.CHANGE_SKILL(SKILL_CRAFT, 8)
			H.my_skills.CHANGE_SKILL(SKILL_ENGINE, rand(0,0))
			H.my_skills.CHANGE_SKILL(SKILL_SURG, rand(0,0))
			H.my_skills.CHANGE_SKILL(SKILL_MEDIC, rand(0,0))
			H.my_skills.CHANGE_SKILL(SKILL_CLEAN, rand(0,0))
			H.my_stats.change_stat(STAT_HT, -1)
			H.my_stats.change_stat(STAT_DX, -1)
			H.my_stats.change_stat(STAT_IN, 0)
/*		if("Mercenary")
			/*for(var/obj/effect/landmark/L in landmarks_list)
				if (L.name == "Mercenary")
					H.forceMove(L.loc)*/
			H.add_perk(/datum/perk/ref/strongback)
			H.terriblethings = TRUE
			if(seaspotter_merc.Find(H.ckey))
				H.equip_to_slot_or_del(new /obj/item/clothing/suit/armor/leather/seaspotter(H), slot_wear_suit)
				H.equip_to_slot_or_del(new /obj/item/clothing/under/rank/security(H), slot_w_uniform)
				H.equip_to_slot_or_del(new /obj/item/sheath/claymore(H), slot_belt)
				H.equip_to_slot_or_del(new /obj/item/weapon/crossbow(H), slot_back)
				H.equip_to_slot_or_del(new /obj/item/weapon/arrow(H), slot_r_store)
				H.equip_to_slot_or_del(new /obj/item/weapon/arrow(H), slot_l_store)
				H.my_skills.melee = rand(2,3)
				H.my_skills.ranged = rand(3,5)
				H.my_skills.hydroponics = rand(-1,0)
				H.my_skills.cooking = rand(2,4)
				H.my_skills.engineering = rand(-1,0)
				H.my_skills.surgery = rand(0,2)
				H.my_skills.medicine = rand(0,2)
				H.my_skills.cleaning = rand(0,3)
				H.my_skills.climbing = rand(3,5)
				H.my_skills.swimming = rand(3,5)
				H.my_stats.st = rand(10,13)
				H.my_stats.ht = rand(7,15)
				H.my_stats.dx = rand(9,13)
				H.my_stats.it = rand(7,10)
			else if(H.ckey in reddawn_merc)
				H.equip_to_slot_or_del(new /obj/item/clothing/suit/armor/leather/reddawn(H), slot_wear_suit)
				H.equip_to_slot_or_del(new /obj/item/clothing/under/rank/security(H), slot_w_uniform)
				H.equip_to_slot_or_del(new /obj/item/sheath/claymore(H), slot_belt)
				H.equip_to_slot_or_del(new /obj/item/weapon/crossbow(H), slot_back)
				H.equip_to_slot_or_del(new /obj/item/weapon/arrow(H), slot_r_store)
				H.equip_to_slot_or_del(new /obj/item/weapon/arrow(H), slot_l_store)
				H.my_skills.climbing = rand(3,5)
				H.my_skills.melee = rand(4,5)
				H.my_skills.ranged = rand(4,5)
				H.my_skills.hydroponics = rand(-1,0)
				H.my_skills.cooking = rand(1,3)
				H.my_skills.engineering = rand(-1,0)
				H.my_skills.surgery = rand(0,3)
				H.my_skills.medicine = rand(0,3)
				H.my_skills.cleaning = rand(0,3)
				H.my_stats.st = rand(11,13)
				H.my_stats.ht = rand(10,15)
				H.my_stats.dx = rand(10,13)
				H.my_stats.it = rand(8,10)
			else
				H.equip_to_slot_or_del(new /obj/item/clothing/suit/armor/leather(H), slot_wear_suit)
				H.equip_to_slot_or_del(new /obj/item/clothing/under/rank/security(H), slot_w_uniform)
				H.equip_to_slot_or_del(new /obj/item/sheath/claymore(H), slot_belt)
				H.equip_to_slot_or_del(new /obj/item/weapon/crossbow(H), slot_back)
				H.equip_to_slot_or_del(new /obj/item/weapon/arrow(H), slot_r_store)
				H.equip_to_slot_or_del(new /obj/item/weapon/arrow(H), slot_l_store)
				H.my_skills.melee = rand(2,3)
				H.my_skills.ranged = rand(2,3)
				H.my_skills.hydroponics = rand(-1,0)
				H.my_skills.climbing = rand(3,5)
				H.my_skills.cooking = rand(1,3)
				H.my_skills.engineering = rand(-1,0)
				H.my_skills.surgery = rand(0,2)
				H.my_skills.medicine = rand(0,2)
				H.my_skills.cleaning = rand(0,3)
				H.my_stats.st = rand(10,13)
				H.my_stats.ht = rand(7,15)
				H.my_stats.dx = rand(9,13)
				H.my_stats.it = rand(7,10)*/
		if("Miner")
			H.equip_to_slot_or_del(new /obj/item/clothing/head/hardhat/orange(H), slot_head)
			H.equip_to_slot_or_del(new /obj/item/clothing/under/rank/migrant(H), slot_w_uniform)
			H.equip_to_slot_or_del(new /obj/item/clothing/mask/breath(H), slot_wear_mask)
			H.equip_to_slot_or_del(new /obj/item/weapon/pickaxe(H), slot_l_hand)
			H.equip_to_slot_or_del(new /obj/item/weapon/shovel(H), slot_belt)
			H.equip_to_slot_or_del(new /obj/item/clothing/suit/minerapron(H), slot_wear_suit)
			H.equip_to_slot_or_del(new /obj/item/weapon/storage/backpack/migrant(H), slot_back)
			H.my_skills.CHANGE_SKILL(SKILL_MELEE, rand(8,8))
			H.my_skills.CHANGE_SKILL(SKILL_RANGE, rand(5,5))
			H.my_skills.CHANGE_SKILL(SKILL_FARM, rand(0,0))
			H.my_skills.CHANGE_SKILL(SKILL_COOK, rand(4,7))
			H.my_skills.CHANGE_SKILL(SKILL_CLIMB, rand(10,11))
			H.my_skills.CHANGE_SKILL(SKILL_ENGINE, rand(6,8))
			H.my_skills.CHANGE_SKILL(SKILL_MASON, rand(11,13))
			H.my_skills.CHANGE_SKILL(SKILL_CRAFT, 8)
			H.my_skills.CHANGE_SKILL(SKILL_SURG, rand(0,0))
			H.my_skills.CHANGE_SKILL(SKILL_MEDIC, rand(0,0))
			H.my_skills.CHANGE_SKILL(SKILL_CLEAN, rand(0,0))
			H.my_skills.CHANGE_SKILL(SKILL_MINE, rand(13,15))
			H.my_stats.change_stat(STAT_ST, 2)
			H.my_stats.change_stat(STAT_HT, 1)
			H.my_stats.change_stat(STAT_DX, -2)
			H.my_stats.change_stat(STAT_IN, -1)
			H.stat = CONSCIOUS
			H.nutrition = 300
			H.can_stand = 1
			H.sleeping = 0
			H.update_inv_head()
			H.update_inv_wear_suit()
			H.update_inv_gloves()
			H.update_inv_shoes()
			H.update_inv_w_uniform()
			H.update_inv_glasses()
			H.update_inv_l_hand()
			H.update_inv_r_hand()
			H.update_inv_belt()
			H.update_inv_wear_id()
			H.update_inv_ears()
			H.update_inv_s_store()
			H.update_inv_pockets()
			H.update_inv_back()
			H.update_inv_handcuffed()
			H.update_inv_wear_mask()
			H.updateStatPanel()
			H.add_perk(/datum/perk/ref/strongback)
			H.add_perk(/datum/perk/illiterate)
		if("Expedition Leader")
			if(H.religion == "Thanati")
				expedition_leader_th = H
			else
				expedition_leader_pc = H
			H.equip_to_slot_or_del(new /obj/item/clothing/head/expedleader(H), slot_head)
			H.equip_to_slot_or_del(new /obj/item/weapon/pickaxe(H), slot_l_hand)
			H.equip_to_slot_or_del(new /obj/item/clothing/under/rank/migrant(H), slot_w_uniform)
			H.equip_to_slot_or_del(new /obj/item/clothing/suit/armor/vest/iron_breastplate(H), slot_wear_suit)
			H.equip_to_slot_or_del(new /obj/item/weapon/storage/backpack/migrant(H), slot_back)
			H.equip_to_slot_or_del(new /obj/item/weapon/horn(H), slot_belt)
			H.my_skills.CHANGE_SKILL(SKILL_MELEE, rand(10,10))
			H.my_skills.CHANGE_SKILL(SKILL_RANGE, rand(9,9))
			H.my_skills.CHANGE_SKILL(SKILL_FARM, rand(7,9))
			H.my_skills.CHANGE_SKILL(SKILL_COOK, rand(10,11))
			H.my_skills.CHANGE_SKILL(SKILL_CLIMB, rand(11,12))
			H.my_skills.CHANGE_SKILL(SKILL_ENGINE, rand(8,9))
			H.my_skills.CHANGE_SKILL(SKILL_MASON, 10)
			H.my_skills.CHANGE_SKILL(SKILL_CRAFT, rand(10,11))
			H.my_skills.CHANGE_SKILL(SKILL_MINE, 11)
			H.my_skills.CHANGE_SKILL(SKILL_SURG, rand(11,11))
			H.my_skills.CHANGE_SKILL(SKILL_MEDIC, rand(10,10))
			H.my_skills.CHANGE_SKILL(SKILL_SURVIV, rand(11,14))
			H.my_skills.CHANGE_SKILL(SKILL_SWIM, rand(11,12))
			H.my_stats.change_stat(STAT_ST, 1)
			H.my_stats.change_stat(STAT_HT, 1)
			H.my_stats.change_stat(STAT_DX, 0)
			H.my_stats.change_stat(STAT_IN, 2)
			H.add_perk(/datum/perk/ref/strongback)
			H.add_perk(/datum/perk/pathfinder)

			H.add_verb(list(/mob/living/carbon/human/proc/pathfinder_track,
			/mob/living/carbon/human/proc/pathfinder_trackself,
			/mob/living/carbon/human/proc/set_mig_spawn,
			/mob/living/carbon/human/proc/announceEx))

			H.terriblethings = TRUE
		if("Thief")
			H.equip_to_slot_or_del(new /obj/item/clothing/under/rank/migrant(H), slot_w_uniform)
			H.equip_to_slot_or_del(new /obj/item/weapon/flame/torch/lantern/on(H), slot_r_hand)
			H.equip_to_slot_or_del(new /obj/item/clothing/mask/balaclava(H), slot_wear_mask)
			H.equip_to_slot_or_del(new /obj/item/weapon/kitchen/utensil/knife/combat(H), slot_l_hand)
			H.equip_to_slot_or_del(new /obj/item/weapon/cloaking_device(H), slot_wrist_r)
			H.equip_to_slot_or_del(new /obj/item/weapon/storage/backpack/migrant(H), slot_back)
			H.my_skills.CHANGE_SKILL(SKILL_MELEE, rand(8,8))
			H.my_skills.CHANGE_SKILL(SKILL_RANGE, rand(9,9))
			H.my_skills.CHANGE_SKILL(SKILL_FARM, rand(0,0))
			H.my_skills.CHANGE_SKILL(SKILL_MASON, 8)
			H.my_skills.CHANGE_SKILL(SKILL_CRAFT, 8)
			H.my_skills.CHANGE_SKILL(SKILL_COOK, rand(0,1))
			H.my_skills.CHANGE_SKILL(SKILL_ENGINE, rand(0,0))
			H.my_skills.CHANGE_SKILL(SKILL_SURG, rand(0,0))
			H.my_skills.CHANGE_SKILL(SKILL_CLIMB, rand(13,14))
			H.my_skills.CHANGE_SKILL(SKILL_MEDIC, rand(0,0))
			H.my_skills.CHANGE_SKILL(SKILL_CLEAN, rand(0,0))
			H.my_skills.CHANGE_SKILL(SKILL_STEAL, rand(13,14))
			H.my_stats.change_stat(STAT_HT, 0)
			H.my_stats.change_stat(STAT_DX, 3)
			H.my_stats.change_stat(STAT_IN, 1)
			//H.jewish = TRUE
			H.add_perk(/datum/perk/ref/value)
		if("Pcheloved")
			H.equip_to_slot_or_del(new /obj/item/clothing/under/rank/migrant(H), slot_w_uniform)
			H.equip_to_slot_or_del(new /obj/item/weapon/flame/torch/lantern/on(H), slot_r_hand)
			H.equip_to_slot_or_del(new /obj/item/clothing/suit/bio_suit(H), slot_wear_suit)
			H.equip_to_slot_or_del(new /obj/item/clothing/head/bio_hood(H), slot_head)
			H.equip_to_slot_or_del(new /obj/item/weapon/storage/backpack/migrant(H), slot_back)
			H.equip_to_slot_or_del(new /obj/item/clothing/mask/bee(H), slot_wear_mask)
			H.my_skills.CHANGE_SKILL(SKILL_CLIMB, rand(10,11))
			H.my_skills.CHANGE_SKILL(SKILL_FARM, rand(11,12))
			H.my_skills.CHANGE_SKILL(SKILL_MELEE, rand(7,7))
			H.my_skills.CHANGE_SKILL(SKILL_RANGE, rand(5,5))
			H.my_skills.CHANGE_SKILL(SKILL_MASON, 8)
			H.my_skills.CHANGE_SKILL(SKILL_CRAFT, 8)
			H.my_skills.CHANGE_SKILL(SKILL_COOK, rand(11,11))
			H.my_skills.CHANGE_SKILL(SKILL_SURVIV, rand(11,12))
			H.my_skills.CHANGE_SKILL(SKILL_MEDIC, rand(6,9))
			H.my_stats.change_stat(STAT_HT, -1)
			H.my_stats.change_stat(STAT_DX, 0)
			H.my_stats.change_stat(STAT_IN, 1)
			H.add_perk(/datum/perk/bees)
			new /obj/structure/bee_hive(H.loc)
		if("Engineer")
			H.equip_to_slot_or_del(new /obj/item/weapon/flame/torch/lantern/on(H), slot_r_hand)
			H.equip_to_slot_or_del(new /obj/item/clothing/under/rank/migrant(H), slot_w_uniform)
			H.equip_to_slot_or_del(new /obj/item/weapon/storage/backpack/migrant(H), slot_back)
			H.my_skills.CHANGE_SKILL(SKILL_MELEE, rand(8,8))
			H.my_skills.CHANGE_SKILL(SKILL_RANGE, rand(5,5))
			H.my_skills.CHANGE_SKILL(SKILL_FARM, rand(0,0))
			H.my_skills.CHANGE_SKILL(SKILL_COOK, rand(0,0))
			H.my_skills.CHANGE_SKILL(SKILL_ENGINE, rand(14,16))
			H.my_skills.CHANGE_SKILL(SKILL_MASON, 8)
			H.my_skills.CHANGE_SKILL(SKILL_CRAFT, 12)
			H.my_skills.CHANGE_SKILL(SKILL_SURG, rand(0,0))
			H.my_skills.CHANGE_SKILL(SKILL_MEDIC, rand(0,0))
			H.my_skills.CHANGE_SKILL(SKILL_CLIMB, rand(10,11))
			H.my_skills.CHANGE_SKILL(SKILL_CLEAN, rand(0,0))
			H.my_stats.change_stat(STAT_ST, 2)
			H.my_stats.change_stat(STAT_DX, -2)
			H.my_stats.change_stat(STAT_IN, 1)
		if("Acrobat")
			H.equip_to_slot_or_del(new /obj/item/clothing/under/rank/migrant(H), slot_w_uniform)
			H.equip_to_slot_or_del(new /obj/item/weapon/throwingknife/silver(H), slot_r_store)
			H.equip_to_slot_or_del(new /obj/item/weapon/throwingknife(H), slot_l_store)
			H.equip_to_slot_or_del(new /obj/item/weapon/storage/backpack/migrant(H), slot_back)
			H.my_skills.CHANGE_SKILL(SKILL_MELEE, rand(7,7))
			H.my_skills.CHANGE_SKILL(SKILL_RANGE, rand(5,5))
			H.my_skills.CHANGE_SKILL(SKILL_FARM, rand(0,0))
			H.my_skills.CHANGE_SKILL(SKILL_COOK, rand(0,0))
			H.my_skills.CHANGE_SKILL(SKILL_MASON, 8)
			H.my_skills.CHANGE_SKILL(SKILL_CRAFT, 8)
			H.my_skills.CHANGE_SKILL(SKILL_ENGINE, rand(0,0))
			H.my_skills.CHANGE_SKILL(SKILL_SURG, rand(4,6))
			H.my_skills.CHANGE_SKILL(SKILL_CLIMB, rand(14,16))
			H.my_skills.CHANGE_SKILL(SKILL_MEDIC, rand(5,7))
			H.my_skills.CHANGE_SKILL(SKILL_CLEAN, rand(0,0))
			H.my_stats.change_stat(STAT_ST, -1)
			H.my_stats.change_stat(STAT_HT, -2)
			H.my_stats.change_stat(STAT_DX, 4)
			H.my_stats.change_stat(STAT_IN, -2)
			H.acrobat = 1
			H.add_perk(/datum/perk/ref/jumper)
			H.add_perk(/datum/perk/illiterate)
		if("Healer")
			H.equip_to_slot_or_del(new /obj/item/weapon/storage/firstaid/adv(H), slot_l_hand)
			H.equip_to_slot_or_del(new /obj/item/clothing/head/healer(H), slot_head)
			H.equip_to_slot_or_del(new /obj/item/clothing/mask/plaguedoctor(H), slot_wear_mask)
			H.equip_to_slot_or_del(new /obj/item/clothing/under/rank/migrant(H), slot_w_uniform)
			H.equip_to_slot_or_del(new /obj/item/weapon/storage/backpack/migrant(H), slot_back)
			H.my_skills.CHANGE_SKILL(SKILL_MELEE, rand(5,5))
			H.my_skills.CHANGE_SKILL(SKILL_RANGE, rand(5,5))
			H.my_skills.CHANGE_SKILL(SKILL_FARM, rand(0,0))
			H.my_skills.CHANGE_SKILL(SKILL_COOK, rand(0,0))
			H.my_skills.CHANGE_SKILL(SKILL_ENGINE, rand(0,0))
			H.my_skills.CHANGE_SKILL(SKILL_MASON, 8)
			H.my_skills.CHANGE_SKILL(SKILL_CRAFT, 8)
			H.my_skills.CHANGE_SKILL(SKILL_SURG, rand(13,13))
			H.my_skills.CHANGE_SKILL(SKILL_MEDIC, rand(13,13))
			H.my_skills.CHANGE_SKILL(SKILL_CLEAN, rand(0,0))
			H.my_skills.CHANGE_SKILL(SKILL_CLIMB, rand(10,11))
			H.my_stats.change_stat(STAT_HT, -1)
			H.my_stats.change_stat(STAT_IN, 2)
			H.my_stats.change_stat(STAT_DX, -2)
			H.terriblethings = TRUE
		if("Alchemist")
			H.equip_to_slot_or_del(new /obj/item/clothing/under/rank/migrant(H), slot_w_uniform)
			H.equip_to_slot_or_del(new /obj/item/weapon/storage/backpack/migrant(H), slot_back)
			H.equip_to_slot_or_del(new /obj/item/weapon/storage/fancy/vials(H.back), slot_in_backpack)
			H.equip_to_slot_or_del(new /obj/item/weapon/storage/fancy/vials(H.back), slot_in_backpack)
			H.equip_to_slot_or_del(new /obj/item/weapon/retort(H.back), slot_in_backpack)
			H.equip_to_slot_or_del(new /obj/item/weapon/mortar(H.back), slot_in_backpack)
			H.equip_to_slot_or_del(new /obj/item/weapon/pestle(H.back), slot_in_backpack)
			H.equip_to_slot_or_del(new /obj/item/weapon/flame/torch/on(H), slot_r_hand)
			H.my_skills.CHANGE_SKILL(SKILL_MELEE, rand(5,5))
			H.my_skills.CHANGE_SKILL(SKILL_RANGE, rand(6,6))
			H.my_skills.CHANGE_SKILL(SKILL_FARM, rand(0,0))
			H.my_skills.CHANGE_SKILL(SKILL_COOK, rand(4,7))
			H.my_skills.CHANGE_SKILL(SKILL_ENGINE, rand(0,0))
			H.my_skills.CHANGE_SKILL(SKILL_MASON, 8)
			H.my_skills.CHANGE_SKILL(SKILL_CRAFT, 8)
			H.my_skills.CHANGE_SKILL(SKILL_SURG, rand(8,9))
			H.my_skills.CHANGE_SKILL(SKILL_MEDIC, rand(8,9))
			H.my_skills.CHANGE_SKILL(SKILL_ALCH, rand(14,17))
			H.my_skills.CHANGE_SKILL(SKILL_CLEAN, rand(0,0))
			H.my_skills.CHANGE_SKILL(SKILL_CLIMB, rand(10,11))
			H.my_stats.change_stat(STAT_ST, -1)
			H.my_stats.change_stat(STAT_HT, -1)
			H.my_stats.change_stat(STAT_DX, -2)
			H.my_stats.change_stat(STAT_IN, 4)
			H.terriblethings = TRUE
		if("Reporter")
			H.equip_to_slot_or_del(new /obj/item/clothing/glasses/metro(H), slot_glasses)
			H.equip_to_slot_or_del(new /obj/item/clothing/suit/storage/vest/flakjacket(H), slot_wear_suit)
			H.equip_to_slot_or_del(new /obj/item/device/camera(H), slot_l_hand)
			H.equip_to_slot_or_del(new /obj/item/clothing/under/rank/migrant(H), slot_w_uniform)
			H.equip_to_slot_or_del(new /obj/item/weapon/storage/backpack/migrant(H), slot_back)
			H.my_skills.CHANGE_SKILL(SKILL_MELEE, rand(5,5))
			H.my_skills.CHANGE_SKILL(SKILL_RANGE, rand(7,7))
			H.my_skills.CHANGE_SKILL(SKILL_FARM, rand(0,0))
			H.my_skills.CHANGE_SKILL(SKILL_COOK, rand(4,7))
			H.my_skills.CHANGE_SKILL(SKILL_ENGINE, rand(0,0))
			H.my_skills.CHANGE_SKILL(SKILL_CLIMB, rand(10,11))
			H.my_skills.CHANGE_SKILL(SKILL_SURG, rand(0,0))
			H.my_skills.CHANGE_SKILL(SKILL_MEDIC, rand(0,0))
			H.my_skills.CHANGE_SKILL(SKILL_CLEAN, rand(0,0))
			H.my_stats.change_stat(STAT_HT, 0)
			H.my_stats.change_stat(STAT_DX, 0)
			H.my_stats.change_stat(STAT_IN, 1)
			H.terriblethings = TRUE
		if("Pathfinder")
			H.equip_to_slot_or_del(new /obj/item/clothing/mask/horsehead(H), slot_wear_mask)
			H.equip_to_slot_or_del(new /obj/item/clothing/under/rank/migrant(H), slot_w_uniform)
			H.equip_to_slot_or_del(new /obj/item/weapon/storage/backpack/migrant(H), slot_back)
			H.my_skills.CHANGE_SKILL(SKILL_MELEE, rand(9,10))
			H.my_skills.CHANGE_SKILL(SKILL_RANGE, rand(8,9))
			H.my_skills.CHANGE_SKILL(SKILL_FARM, rand(0,0))
			H.my_skills.CHANGE_SKILL(SKILL_COOK, rand(10,11))
			H.my_skills.CHANGE_SKILL(SKILL_ENGINE, rand(0,0))
			H.my_skills.CHANGE_SKILL(SKILL_MASON, 8)
			H.my_skills.CHANGE_SKILL(SKILL_CRAFT, 10)
			H.my_skills.CHANGE_SKILL(SKILL_SURG, rand(5,5))
			H.my_skills.CHANGE_SKILL(SKILL_MEDIC, rand(7,7))
			H.my_skills.CHANGE_SKILL(SKILL_CLIMB, rand(12,13))
			H.my_skills.CHANGE_SKILL(SKILL_CLEAN, rand(0,0))
			H.my_stats.change_stat(STAT_IN, 1)
			H.add_perk(/datum/perk/pathfinder)
			H.add_verb(list(/mob/living/carbon/human/proc/pathfinder_track,
			/mob/living/carbon/human/proc/pathfinder_trackself))
			H.updateStatPanel()
		if("Blacksmith")
			H.equip_to_slot_or_del(new /obj/item/clothing/suit/apron(H), slot_wear_suit)
			H.equip_to_slot_or_del(new /obj/item/clothing/under/rank/migrant(H), slot_w_uniform)
			H.equip_to_slot_or_del(new /obj/item/weapon/carverhammer(H), slot_l_hand)
			H.equip_to_slot_or_del(new /obj/item/weapon/alicate(H), slot_belt)
			H.equip_to_slot_or_del(new /obj/item/weapon/storage/backpack/migrant(H), slot_back)
			H.equip_to_slot_or_del(new /obj/item/weapon/storage/backpack/satchel(H), slot_back2)
			H.my_skills.CHANGE_SKILL(SKILL_MELEE, rand(8,8))
			H.my_skills.CHANGE_SKILL(SKILL_RANGE, rand(0,0))
			H.my_skills.CHANGE_SKILL(SKILL_FARM, rand(0,0))
			H.my_skills.CHANGE_SKILL(SKILL_COOK, rand(4,7))
			H.my_skills.CHANGE_SKILL(SKILL_ENGINE, rand(0,0))
			H.my_skills.CHANGE_SKILL(SKILL_MASON, 8)
			H.my_skills.CHANGE_SKILL(SKILL_CRAFT, 10)
			H.my_skills.CHANGE_SKILL(SKILL_SURG, rand(0,0))
			H.my_skills.CHANGE_SKILL(SKILL_MEDIC, rand(0,0))
			H.my_skills.CHANGE_SKILL(SKILL_CLEAN, rand(0,0))
			H.my_skills.CHANGE_SKILL(SKILL_SMITH, rand(13,13))
			H.my_skills.CHANGE_SKILL(SKILL_CLIMB, rand(10,11))
			H.my_stats.change_stat(STAT_ST, 2)
			H.my_stats.change_stat(STAT_HT, 1)
			H.my_stats.change_stat(STAT_DX, -1)
			H.my_stats.change_stat(STAT_IN, -1)
		if("Gemcutter")
			H.equip_to_slot_or_del(new /obj/item/clothing/under/rank/migrant(H), slot_w_uniform)
			H.equip_to_slot_or_del(new /obj/item/weapon/chisel(H), slot_l_hand)
			H.equip_to_slot_or_del(new /obj/item/weapon/storage/backpack/migrant(H), slot_back)
			H.equip_to_slot_or_del(new /obj/item/weapon/storage/backpack/satchel(H), slot_back2)
			H.equip_to_slot_or_del(new /obj/item/weapon/flame/torch/lantern/on(H), slot_r_hand)
			H.equip_to_slot_or_del(new /obj/item/weapon/storage/backpack/coinbag(H), slot_amulet)
			H.my_skills.CHANGE_SKILL(SKILL_MELEE, rand(4,8))
			H.my_skills.CHANGE_SKILL(SKILL_RANGE, rand(4,6))
			H.my_skills.CHANGE_SKILL(SKILL_FARM, rand(0,0))
			H.my_skills.CHANGE_SKILL(SKILL_COOK, rand(3,6))
			H.my_skills.CHANGE_SKILL(SKILL_ENGINE, rand(0,0))
			H.my_skills.CHANGE_SKILL(SKILL_MASON, 12)
			H.my_skills.CHANGE_SKILL(SKILL_CRAFT, rand(11,14))
			H.my_skills.CHANGE_SKILL(SKILL_SURG, rand(1,4))
			H.my_skills.CHANGE_SKILL(SKILL_MEDIC, rand(0,0))
			H.my_skills.CHANGE_SKILL(SKILL_CLEAN, rand(4,6))
			H.my_skills.CHANGE_SKILL(SKILL_CLIMB, rand(8,11))
			H.my_stats.change_stat(STAT_ST, 0)
			H.my_stats.change_stat(STAT_HT, 0)
			H.my_stats.change_stat(STAT_DX, 1)
			H.my_stats.change_stat(STAT_IN, 2)
			H.add_perk(/datum/perk/gemcutting)
		if("Crusader")
			H.equip_to_slot_or_del(new /obj/item/clothing/suit/armor/vest/iron_plate/crusader(H), slot_wear_suit)
			H.equip_to_slot_or_del(new /obj/item/clothing/under/rank/chaplain(H), slot_w_uniform)
			H.equip_to_slot_or_del(new /obj/item/clothing/head/helmet/lw/crusader(H), slot_head)
			H.equip_to_slot_or_del(new /obj/item/weapon/claymore/silver(H), slot_l_hand)
			H.equip_to_slot_or_del(new /obj/item/sheath(H), slot_belt)
			H.equip_to_slot_or_del(new /obj/item/clothing/shoes/lw/paladin(H), slot_shoes)
			H.add_perk(/datum/perk/ref/strongback)
			H.terriblethings = TRUE
			H.add_perk(/datum/perk/heroiceffort)
			H.religion = "Gray Church"
			if(master_mode == "holywar")
				if(H.religion == "Gray Church")
					for(var/obj/effect/landmark/L in landmarks_list)
						if (L.name == "GrayChurchWar")
							H.forceMove(L.loc)
			H.my_skills.CHANGE_SKILL(SKILL_MELEE, rand(12,12))
			H.my_skills.CHANGE_SKILL(SKILL_RANGE, rand(9,9))
			H.my_skills.CHANGE_SKILL(SKILL_FARM, rand(0,0))
			H.my_skills.CHANGE_SKILL(SKILL_COOK, rand(4,7))
			H.my_skills.CHANGE_SKILL(SKILL_ENGINE, rand(0,0))
			H.my_skills.CHANGE_SKILL(SKILL_MASON, 8)
			H.my_skills.CHANGE_SKILL(SKILL_CRAFT, 8)
			H.my_skills.CHANGE_SKILL(SKILL_SURG, rand(0,0))
			H.my_skills.CHANGE_SKILL(SKILL_MEDIC, rand(0,0))
			H.my_skills.CHANGE_SKILL(SKILL_CLEAN, rand(0,0))
			H.my_skills.CHANGE_SKILL(SKILL_CLIMB, rand(10,11))
			H.my_skills.CHANGE_SKILL(SKILL_SWORD, 3)
			H.my_skills.CHANGE_SKILL(SKILL_UNARM, rand(1,2))
			H.my_stats.change_stat(STAT_ST, 3)
			H.my_stats.change_stat(STAT_HT, 4)
			H.my_stats.change_stat(STAT_DX, 0)
			H.my_stats.change_stat(STAT_IN, 1)
		if("Monk")
			H.my_skills.CHANGE_SKILL(SKILL_MELEE, rand(11,11))
			H.my_skills.CHANGE_SKILL(SKILL_RANGE, rand(5,5))
			H.my_skills.CHANGE_SKILL(SKILL_COOK, rand(4,7))
			H.my_skills.CHANGE_SKILL(SKILL_MASON, 8)
			H.my_skills.CHANGE_SKILL(SKILL_CRAFT, 8)
			H.my_skills.CHANGE_SKILL(SKILL_SURG, 5)
			H.my_skills.CHANGE_SKILL(SKILL_MEDIC, 5)
			H.my_skills.CHANGE_SKILL(SKILL_CLEAN, 1)
			H.my_skills.CHANGE_SKILL(SKILL_CLIMB, rand(10,11))
			H.my_stats.change_stat(STAT_ST, 1)
			H.my_stats.change_stat(STAT_DX, 1)
			H.my_stats.change_stat(STAT_IN, 1)
			H.religion = "Gray Church"
			H.equip_to_slot_or_del(new /obj/item/clothing/under/rank/chaplain(H), slot_w_uniform)
			H.equip_to_slot_or_del(new /obj/item/clothing/suit/hood/monk(H), slot_wear_suit)
			H.equip_to_slot_or_del(new /obj/item/weapon/melee/classic_baton/staff(H), slot_l_hand)
			H.equip_to_slot_or_del(new /obj/item/clothing/head/amulet/holy/cross/old(H), slot_amulet)
			H.add_verb(list(/mob/living/carbon/human/proc/marriage,
			/mob/living/carbon/human/proc/banish,
			/mob/living/carbon/human/proc/undeadead,
			/mob/living/carbon/human/proc/sins,
			/mob/living/carbon/human/proc/eucharisty))
			H.updateStatPanel()
		if("Martial Artist")
			H.my_skills.CHANGE_SKILL(SKILL_MELEE, rand(9,9))
			H.my_skills.CHANGE_SKILL(SKILL_RANGE, rand(5,5))
			H.my_skills.CHANGE_SKILL(SKILL_COOK, rand(4,7))
			H.my_skills.CHANGE_SKILL(SKILL_MASON, 8)
			H.my_skills.CHANGE_SKILL(SKILL_CRAFT, 8)
			H.my_skills.CHANGE_SKILL(SKILL_CLIMB, rand(10,11))
			H.my_skills.CHANGE_SKILL(SKILL_UNARM, rand(9,9))
			H.my_stats.change_stat(STAT_ST, 1)
			H.my_stats.change_stat(STAT_HT, 1)
			H.my_stats.change_stat(STAT_DX, 2)
			H.my_stats.change_stat(STAT_IN, 0)
			H.equip_to_slot_or_del(new /obj/item/clothing/under/rank/hydroponics(H), slot_w_uniform)
			H.equip_to_slot_or_del(new /obj/item/clothing/head/headband(H), slot_head)
			H.add_perk(/datum/perk/ref/strongback)
			H.add_perk(/datum/perk/morestamina)
			H.add_perk(/datum/perk/ref/slippery)
			H.updateStatPanel()
//////////////////////////////
//////////////////////////////
//////OUTLAWS/////////////////
//////////////////////////////
//////////////////////////////
		if("Robber")
			H.equip_to_slot_or_del(new /obj/item/clothing/under/rank/migrant(H), slot_w_uniform)
			H.equip_to_slot_or_del(new /obj/item/weapon/flame/torch/lantern/on(H), slot_r_hand)
			H.equip_to_slot_or_del(new /obj/item/weapon/melee/classic_baton/blackjack(H), slot_belt)
			H.equip_to_slot_or_del(new /obj/item/clothing/mask/balaclava(H), slot_wear_mask)
			H.my_skills.CHANGE_SKILL(SKILL_MELEE, rand(9,9))
			H.my_skills.CHANGE_SKILL(SKILL_RANGE, rand(7,7))
			H.my_skills.CHANGE_SKILL(SKILL_FARM, rand(0,0))
			H.my_skills.CHANGE_SKILL(SKILL_COOK, rand(4,7))
			H.my_skills.CHANGE_SKILL(SKILL_ENGINE, rand(0,0))
			H.my_skills.CHANGE_SKILL(SKILL_MASON, 8)
			H.my_skills.CHANGE_SKILL(SKILL_CRAFT, 8)
			H.my_skills.CHANGE_SKILL(SKILL_SURG, rand(0,0))
			H.my_skills.CHANGE_SKILL(SKILL_MEDIC, rand(0,0))
			H.my_skills.CHANGE_SKILL(SKILL_CLEAN, rand(0,0))
			H.my_skills.CHANGE_SKILL(SKILL_CLIMB, rand(11,12))
			H.my_stats.change_stat(STAT_ST, 1)
			H.my_stats.change_stat(STAT_HT, 1)
			H.my_stats.change_stat(STAT_DX, 3)
			H.terriblethings = TRUE
			H.my_stats.change_stat(STAT_IN, 0)
			H.my_skills.CHANGE_SKILL(SKILL_STEAL, rand(14,16))
			H.bandit = TRUE
			for(var/obj/effect/landmark/L in landmarks_list)
				if (L.name == "Bandit")
					H.forceMove(L.loc)
		if("Grave Robber")
			H.equip_to_slot_or_del(new /obj/item/clothing/under/rank/migrant(H), slot_w_uniform)
			H.equip_to_slot_or_del(new /obj/item/weapon/flame/torch/lantern/on(H), slot_r_hand)
			H.equip_to_slot_or_del(new /obj/item/daggerssheath/iron(H), slot_wrist_l)
			H.equip_to_slot_or_del(new /obj/item/weapon/shovel(H), slot_belt)
			H.equip_to_slot_or_del(new /obj/item/clothing/suit/hood/thief(H), slot_wear_suit)
			H.equip_to_slot_or_del(new /obj/item/clothing/gloves/fingerless(H), slot_gloves)
			H.terriblethings = TRUE
			H.my_skills.CHANGE_SKILL(SKILL_MELEE, rand(7,7))
			H.my_skills.CHANGE_SKILL(SKILL_RANGE, rand(7,7))
			H.my_skills.CHANGE_SKILL(SKILL_FARM, rand(0,0))
			H.my_skills.CHANGE_SKILL(SKILL_COOK, rand(4,7))
			H.my_skills.CHANGE_SKILL(SKILL_ENGINE, rand(0,0))
			H.my_skills.CHANGE_SKILL(SKILL_MASON, 8)
			H.my_skills.CHANGE_SKILL(SKILL_CRAFT, 8)
			H.my_skills.CHANGE_SKILL(SKILL_SURG, rand(0,0))
			H.my_skills.CHANGE_SKILL(SKILL_MEDIC, rand(0,0))
			H.my_skills.CHANGE_SKILL(SKILL_CLEAN, rand(0,0))
			H.my_skills.CHANGE_SKILL(SKILL_CLIMB, rand(12,13))
			H.my_stats.change_stat(STAT_ST, 1)
			H.my_stats.change_stat(STAT_HT, 3)
			H.my_stats.change_stat(STAT_DX, 0)
			H.my_stats.change_stat(STAT_IN, -1)
			H.my_skills.CHANGE_SKILL(SKILL_STEAL, rand(1,2))
			H.bandit = FALSE
			for(var/obj/effect/landmark/L in landmarks_list)
				if (L.name == "Bandit")
					H.forceMove(L.loc)
		if("Vampire Hunter")
			H.equip_to_slot_or_del(new /obj/item/clothing/under/hunter(H), slot_w_uniform)
			H.equip_to_slot_or_del(new /obj/item/weapon/flame/torch/lantern/on(H), slot_r_hand)
			H.equip_to_slot_or_del(new /obj/item/weapon/claymore/silver(H), slot_l_hand)
			H.equip_to_slot_or_del(new /obj/item/sheath/claymore(H), slot_back)
			H.equip_to_slot_or_del(new /obj/item/sheath(H), slot_belt)
			H.equip_to_slot_or_del(new /obj/item/weapon/throwingknife/silver(H), slot_r_store)
			H.equip_to_slot_or_del(new /obj/item/weapon/throwingknife/silver(H), slot_l_store)
			H.equip_to_slot_or_del(new /obj/item/clothing/suit/hunter(H), slot_wear_suit)
			H.equip_to_slot_or_del(new /obj/item/clothing/shoes/lw/hunter(H), slot_shoes)
			H.equip_to_slot_or_del(new /obj/item/clothing/gloves/combat/gauntlet/hunter(H), slot_gloves)
			H.equip_to_slot_or_del(new /obj/item/clothing/head/hunter(H), slot_head)
			H.terriblethings = TRUE
			H.my_skills.CHANGE_SKILL(SKILL_MELEE, rand(12,12))
			H.my_skills.CHANGE_SKILL(SKILL_RANGE, rand(9,9))
			H.my_skills.CHANGE_SKILL(SKILL_SWORD, 5)
			H.my_skills.CHANGE_SKILL(SKILL_FARM, rand(0,0))
			H.my_skills.CHANGE_SKILL(SKILL_COOK, rand(4,7))
			H.my_skills.CHANGE_SKILL(SKILL_MASON, 8)
			H.my_skills.CHANGE_SKILL(SKILL_CRAFT, 8)
			H.my_skills.CHANGE_SKILL(SKILL_ENGINE, rand(0,0))
			H.my_skills.CHANGE_SKILL(SKILL_SURG, rand(9,9))
			H.my_skills.CHANGE_SKILL(SKILL_MEDIC, rand(9,9))
			H.my_skills.CHANGE_SKILL(SKILL_CLEAN, rand(0,0))
			H.my_skills.CHANGE_SKILL(SKILL_CLIMB, rand(11,12))
			H.my_stats.change_stat(STAT_ST, 2)
			H.my_stats.change_stat(STAT_HT, 2)
			H.my_stats.change_stat(STAT_DX, 2)
			H.my_stats.change_stat(STAT_IN, 1)
		if("Rogue")
			H.equip_to_slot_or_del(new /obj/item/clothing/under/rank/migrant(H), slot_w_uniform)
			var/weapon = pick("mace","sword")
			var/armor = pick("breastplate","cuirass")
			switch(weapon)
				if("mace")
					H.equip_to_slot_or_del(new /obj/item/weapon/melee/classic_baton/club/bronze(H), slot_l_hand)
				if("sword")
					H.equip_to_slot_or_del(new /obj/item/weapon/claymore(H), slot_l_hand)
			switch(armor)
				if("breastplate")
					H.equip_to_slot_or_del(new /obj/item/clothing/suit/armor/vest/iron_breastplate(H), slot_wear_suit)
				if("cuirass")
					H.equip_to_slot_or_del(new /obj/item/clothing/suit/armor/vest/iron_cuirass(H), slot_wear_suit)
			H.equip_to_slot_or_del(new /obj/item/clothing/mask/surgical/church(H), slot_wear_mask)

			H.my_skills.CHANGE_SKILL(SKILL_MELEE, rand(10,10))
			H.my_skills.CHANGE_SKILL(SKILL_RANGE, rand(12,12))
			H.my_skills.CHANGE_SKILL(SKILL_FARM, rand(0,0))
			H.my_skills.CHANGE_SKILL(SKILL_MASON, 8)
			H.my_skills.CHANGE_SKILL(SKILL_CRAFT, 8)
			H.my_skills.CHANGE_SKILL(SKILL_CLIMB, rand(10,11))
			H.my_skills.CHANGE_SKILL(SKILL_COOK, rand(4,7))
			H.terriblethings = TRUE
			H.my_skills.CHANGE_SKILL(SKILL_ENGINE, rand(0,0))
			H.my_skills.CHANGE_SKILL(SKILL_SURG, rand(0,0))
			H.my_skills.CHANGE_SKILL(SKILL_MEDIC, rand(0,0))
			H.my_skills.CHANGE_SKILL(SKILL_CLEAN, rand(0,0))
			H.my_stats.change_stat(STAT_ST, 1)
			H.my_stats.change_stat(STAT_HT, 1)
			H.my_stats.change_stat(STAT_DX, 3)
			H.my_stats.change_stat(STAT_IN, -1)
			H.bandit = TRUE
			for(var/obj/effect/landmark/L in landmarks_list)
				if (L.name == "Bandit")
					H.forceMove(L.loc)
		if("Bandit")
			H.bandit = TRUE
			H.equip_to_slot_or_del(new /obj/item/clothing/under/rank/migrant(H), slot_w_uniform)
			H.equip_to_slot_or_del(new /obj/item/clothing/shoes/lw/jackboots(H), slot_shoes)
			H.equip_to_slot_or_del(new /obj/item/weapon/kitchen/utensil/knife/dagger(H), slot_r_store)
			H.equip_to_slot_or_del(new /obj/item/weapon/flame/torch/on(H), slot_r_hand)
			H.add_perk(/datum/perk/ref/strongback)
			H.terriblethings = TRUE
			for(var/obj/effect/landmark/L in landmarks_list)
				if (L.name == "Bandit")
					H.forceMove(L.loc)
			var/banditweapon = pick("sword","spear","club")
			var/glovetype = pick("gauntlet","leather")
			var/armortype = pick("cuirass","breastplate","plate")
			var/helmettype = pick("elite","neckguard","open","skull")
			switch(glovetype)
				if("gauntlet")
					H.equip_to_slot_or_del(new /obj/item/clothing/gloves/combat/gauntlet/steel(H), slot_gloves)
				if("leather")
					H.equip_to_slot_or_del(new /obj/item/clothing/gloves/botanic_leather(H), slot_gloves)

			switch(helmettype)
				if("elite")
					H.equip_to_slot_or_del(new /obj/item/clothing/head/helmet/lw/elitehelmet(H), slot_head)
				if("neckguard")
					H.equip_to_slot_or_del(new /obj/item/clothing/head/plebhood(H), slot_head)
				if("open")
					H.equip_to_slot_or_del(new /obj/item/clothing/head/helmet/lw/ironopenhelmet(H), slot_head)
				if("skull")
					H.equip_to_slot_or_del(new /obj/item/clothing/head/helmet/lw/openskulliron(H), slot_head)

			switch(armortype)
				if("cuirass")
					H.equip_to_slot_or_del(new /obj/item/clothing/suit/armor/vest/iron_cuirass(H), slot_wear_suit)
				if("breastplate")
					H.equip_to_slot_or_del(new /obj/item/clothing/suit/armor/vest/iron_breastplate(H), slot_wear_suit)
				if("plate")
					H.equip_to_slot_or_del(new /obj/item/clothing/suit/armor/vest/iron_plate(H), slot_wear_suit)

			switch(banditweapon)
				if("sword")
					H.equip_to_slot_or_del(new /obj/item/weapon/claymore/falchion(H), slot_belt)
					H.equip_to_slot_or_del(new /obj/item/weapon/shield/wood(H), slot_l_hand)
				if("spear")
					H.equip_to_slot_or_del(new /obj/item/weapon/claymore/spear(H), slot_l_hand)
				if("club")
					H.equip_to_slot_or_del(new /obj/item/weapon/melee/classic_baton/smallclub(H), slot_belt)
					H.equip_to_slot_or_del(new /obj/item/weapon/shield/wood(H), slot_l_hand)
			H.my_skills.CHANGE_SKILL(SKILL_MELEE, rand(12,12))
			H.my_skills.CHANGE_SKILL(SKILL_RANGE, rand(8,8))
			H.my_skills.CHANGE_SKILL(SKILL_COOK, rand(4,7))
			H.my_skills.CHANGE_SKILL(SKILL_MASON, 8)
			H.my_skills.CHANGE_SKILL(SKILL_CRAFT, 8)
			H.my_skills.CHANGE_SKILL(SKILL_ENGINE, rand(0,0))
			H.my_skills.CHANGE_SKILL(SKILL_SURG, rand(0,0))
			H.my_skills.CHANGE_SKILL(SKILL_MEDIC, rand(0,0))
			H.my_skills.CHANGE_SKILL(SKILL_CLEAN, rand(0,0))
			H.my_skills.CHANGE_SKILL(SKILL_CLIMB, rand(10,11))
			H.my_skills.CHANGE_SKILL(SKILL_STEAL, rand(8,9))
			H.my_stats.change_stat(STAT_ST, 3)
			H.my_stats.change_stat(STAT_HT, 2)
			H.my_stats.change_stat(STAT_DX, -1)
			H.my_stats.change_stat(STAT_IN, -2)
			H.create_kg()
			//H.jewish = TRUE
			H.updateStatPanel()
		if("Town Guard")
			H.equip_to_slot_or_del(new /obj/item/clothing/under/rank/migrant(H), slot_w_uniform)
			H.equip_to_slot_or_del(new /obj/item/clothing/shoes/lw/jackboots(H), slot_shoes)
			H.equip_to_slot_or_del(new /obj/item/weapon/kitchen/utensil/knife/dagger(H), slot_r_store)
			H.equip_to_slot_or_del(new /obj/item/weapon/flame/torch/on(H), slot_r_hand)
			H.add_perk(/datum/perk/ref/strongback)
			H.terriblethings = TRUE
			var/banditweapon = pick("sword","spear","club")
			var/glovetype = pick("gauntlet","leather")
			var/armortype = pick("cuirass","breastplate","plate")
			var/helmettype = pick("elite","neckguard","open","skull")
			switch(glovetype)
				if("gauntlet")
					H.equip_to_slot_or_del(new /obj/item/clothing/gloves/combat/gauntlet/steel(H), slot_gloves)
				if("leather")
					H.equip_to_slot_or_del(new /obj/item/clothing/gloves/botanic_leather(H), slot_gloves)

			switch(helmettype)
				if("elite")
					H.equip_to_slot_or_del(new /obj/item/clothing/head/helmet/lw/elitehelmet(H), slot_head)
				if("neckguard")
					H.equip_to_slot_or_del(new /obj/item/clothing/head/plebhood(H), slot_head)
				if("open")
					H.equip_to_slot_or_del(new /obj/item/clothing/head/helmet/lw/ironopenhelmet(H), slot_head)
				if("skull")
					H.equip_to_slot_or_del(new /obj/item/clothing/head/helmet/lw/openskulliron(H), slot_head)

			switch(armortype)
				if("cuirass")
					H.equip_to_slot_or_del(new /obj/item/clothing/suit/armor/vest/iron_cuirass(H), slot_wear_suit)
				if("breastplate")
					H.equip_to_slot_or_del(new /obj/item/clothing/suit/armor/vest/iron_breastplate(H), slot_wear_suit)
				if("plate")
					H.equip_to_slot_or_del(new /obj/item/clothing/suit/armor/vest/iron_plate(H), slot_wear_suit)

			switch(banditweapon)
				if("sword")
					H.equip_to_slot_or_del(new /obj/item/weapon/claymore/falchion(H), slot_belt)
					H.equip_to_slot_or_del(new /obj/item/weapon/shield/wood(H), slot_l_hand)
				if("spear")
					H.equip_to_slot_or_del(new /obj/item/weapon/claymore/spear(H), slot_l_hand)
				if("club")
					H.equip_to_slot_or_del(new /obj/item/weapon/melee/classic_baton/smallclub(H), slot_belt)
					H.equip_to_slot_or_del(new /obj/item/weapon/shield/wood(H), slot_l_hand)
			H.my_skills.CHANGE_SKILL(SKILL_MELEE, rand(11,11))
			H.my_skills.CHANGE_SKILL(SKILL_RANGE, rand(7,7))
			H.my_skills.CHANGE_SKILL(SKILL_COOK, rand(4,7))
			H.my_skills.CHANGE_SKILL(SKILL_MASON, 8)
			H.my_skills.CHANGE_SKILL(SKILL_CRAFT, 8)
			H.my_skills.CHANGE_SKILL(SKILL_ENGINE, rand(0,0))
			H.my_skills.CHANGE_SKILL(SKILL_SURG, rand(0,0))
			H.my_skills.CHANGE_SKILL(SKILL_MEDIC, rand(0,0))
			H.my_skills.CHANGE_SKILL(SKILL_CLEAN, rand(0,0))
			H.my_skills.CHANGE_SKILL(SKILL_CLIMB, rand(10,11))
			H.my_stats.change_stat(STAT_ST, 2)
			H.my_stats.change_stat(STAT_HT, 2)
			H.my_stats.change_stat(STAT_DX, 0)
			H.my_stats.change_stat(STAT_IN, -1)
			H.create_kg()
			//H.jewish = TRUE
			H.updateStatPanel()
	if(!H.shoes)
		H.equip_to_slot_or_del(new /obj/item/clothing/shoes/lw/leatherboots(H), slot_shoes)
	H.equip_to_slot_or_del(new /obj/item/weapon/flame/torch/on(H), slot_r_hand)
	if(migclass == "Crusader")
		H.equip_to_slot_or_del(new /obj/item/clothing/under/rank/chaplain(H), slot_w_uniform)
	if(ticker.eof.id == "deprived")
		qdel(H.head)
		qdel(H.wrist_r)
		qdel(H.wrist_l)
		qdel(H.back)
		qdel(H.back2)
		qdel(H.l_store)
		qdel(H.r_store)
		qdel(H.belt)
		qdel(H.wear_mask)
		qdel(H.w_uniform)
		qdel(H.s_store)
		qdel(H.gloves)
		qdel(H.r_hand)
		qdel(H.l_hand)
		H.equip_to_slot_or_del(new /obj/item/weapon/flame/torch/on(H), slot_l_hand)
		qdel(H.wear_id)
		qdel(H.wear_suit)
		qdel(H.shoes)
		qdel(H.glasses)
		qdel(H.amulet)
		H.update_inv_l_hand()
		H.update_inv_r_hand()
	if(H.w_uniform && istype(w_uniform, /obj/item/clothing/under/rank/migrant))
		var/obj/item/clothing/under/rank/migrant/MIG = w_uniform
		MIG.maincolor = input(src, "Please select a main color.", "Uniform") as color|null
		MIG.secondcolor = input(src, "Please select a secondary color.", "Uniform") as color|null
		H.update_inv_w_uniform(1)
		if(istype(H.back, /obj/item/weapon/storage/backpack/migrant))
			var/obj/item/weapon/storage/backpack/migrant/M = H.back
			M.maincolor = MIG.maincolor
			M.update_icon(H)
		MIG.update_icon(H)
	to_chat(H, "<color green>You're a <b>[H.migclass]</b></color>")
	H.stat = CONSCIOUS
	H.nutrition = rand(300,500)
	H.can_stand = 1
	H.sleeping = 0
	if(H.back)
		H.equip_to_slot_or_del(new /obj/item/weapon/kitchen/utensil/spoon(H.back), slot_in_backpack)
	H.update_inv_head()
	H.update_inv_wear_suit()
	H.update_inv_gloves()
	H.update_inv_shoes()
	H.update_inv_w_uniform()
	H.update_inv_glasses()
	H.update_inv_l_hand()
	H.update_inv_r_hand()
	H.update_inv_belt()
	H.update_inv_wear_id()
	H.update_inv_ears()
	H.update_inv_s_store()
	H.update_inv_pockets()
	H.update_inv_back()
	H.update_inv_handcuffed()
	H.update_inv_wear_mask()
	H.updateStatPanel()
	H.special_load()
	H.create_kg()
	if(H.ckey in patreons)
		job_master.handle_patreon(H)
	if(FAT in H.mutations)
		H.my_stats.change_stat(STAT_ST, 1)
		H.my_stats.change_stat(STAT_DX, -2)
		H.my_stats.change_stat(STAT_HT, 1)
	if(H.gender == FEMALE && !H.has_penis())
		H.my_stats.change_stat(STAT_ST, -1)
	if(H.age >= 50)
		H.my_stats.change_stat(STAT_ST, -1)
		H.my_stats.change_stat(STAT_HT, -1)
		H.my_stats.change_stat(STAT_IN, 2)
		H.my_stats.change_stat(STAT_PR, 2)
	if(H.age <= 16)
		H.my_stats.set_stat(STAT_ST, rand(7,9))
		H.my_stats.set_stat(STAT_HT, rand(8,10))
	H << sound(pick('sound/lfwbambi/ambimo2.ogg','sound/lfwbambi/ambicha1.ogg'), repeat = 0, wait = 1, volume = 75, channel = 25)

/mob/living/carbon/human/proc/applyVice(var/givenVice)
	inicio:
	if(src.vice)
		switch(src.vice)
			if("Disability (No Right Eye)")
				src.right_eye_fucked = TRUE
				src.equip_to_slot_or_del(new /obj/item/clothing/glasses/Reyepatch(src.back), slot_glasses)
			if("Disability (No Left Eye)")
				src.left_eye_fucked = TRUE
				src.equip_to_slot_or_del(new /obj/item/clothing/glasses/Leyepatch(src.back), slot_glasses)
	else
		src.vice = givenVice
		goto inicio

/mob/living/carbon/human/proc/applyProvince()
	switch(province)
		if("Ravenheart")
			if(prob(35))
				src.my_stats.change_stat(STAT_HT, 1)
				src.my_stats.change_stat(STAT_WP, -1)
				if(src.my_skills.GET_SKILL(SKILL_SURVIV) < 7)
					src.my_skills.ADD_SKILL(SKILL_SURVIV, 1)
			if(prob(75))
				src.add_event("province", /datum/happiness_event/misc/ravenheart)
		if("Savo")
			if(prob(80))
				if(src.my_skills.GET_SKILL(SKILL_FISH) < 7)
					src.my_skills.ADD_SKILL(SKILL_FISH, 1)
		if("Salar")
			return //didnt think of anything yet
		if("Deadeye")
			if(prob(35))
				src.my_stats.change_stat(STAT_DX, 1)
				src.my_stats.change_stat(STAT_PR, 1)
				var/pickskill = pick("sneak","lockpick","pickpocket")
				switch(pickskill)
					if("sneak")
						if(src.my_skills.GET_SKILL(SKILL_SNEAK) < 7)
							src.my_skills.ADD_SKILL(SKILL_SNEAK, rand(1,2))
					if("lockpick")
						if(src.my_skills.GET_SKILL(SKILL_LOCK) < 7)
							src.my_skills.ADD_SKILL(SKILL_LOCK, rand(1,2))
					if("pickpocket")
						if(src.my_skills.GET_SKILL(SKILL_STEAL) < 7)
							src.my_skills.ADD_SKILL(SKILL_STEAL, rand(1,2))
		if("Wei Ji Burrows")
			var/regex/R = regex("(^\\S+) (.*$)") //Get first name and last name
			R.Find(real_name)
			var/first_name = R.group[1]
			var/last_name = R.group[2]
			if(!gink_last_names.Find(last_name))
				last_name = pick(gink_last_names)
				real_name = "[first_name] [last_name]"
				name = real_name
			voicetype = "gink"
			if(prob(100))
				src.my_stats.change_stat(STAT_ST, -1)
				src.my_stats.change_stat(STAT_DX, 1)
			if(prob(35))
				src.equip_to_slot_or_del(new /obj/item/clothing/head/ricehat(src.back), slot_in_backpack)
